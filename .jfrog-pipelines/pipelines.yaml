resources:
  - name: droDocWebhook
    type: IncomingWebhook
    configuration:
      webhookName: triggerDroBundle
  - name: propsSelectorQuery
    type: Aql
    configuration:
      sourceArtifactory: droSolengRT
      query: items.find({"$and":[{"$or":[{"repo":"dro-backend-docker-dev-local","repo":"dro-misc-assets-local"}]},{"type":"file"},{"@drobundle.version":"${bundleVersion}"}]})
  - name: droAppSignedBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: droDistribution
      name: DroDemoBundle
      version: ${bundleVersion}
  - name: droBundleDistributionRules
    type: DistributionRule
    configuration:
      sourceDistribution: droDistribution
      siteName: "solengedge"
      serviceName: "*"
      cityName: "*"
      countryCodes:
        - "US" 
pipelines:
# First pipeline : Create and sign the release bundle
  - name: dro_create_bundle
    configuration:
      chronological: true
    steps:
    - name: ProcessPayload
      type: Bash
      configuration:
        inputResources:
          - name: droDocWebhook
      execution:
      # Here we extract data from the webhook payload
          onExecute:
            - echo "$res_droDocWebhook_payload" | jq '.' > payload.json
            - cat payload.json
            - add_run_variables propKey=$(read_json payload.json "data.property_key")
            - add_run_variables bundleVersion=$(read_json payload.json "data.property_values[0]")
            - echo $propKey
            #- if [ $propKey == "drobundle.version" ]; then  exit 0; fi
            #- if [ $propKey != "drobundle.version" ]; then  exit 1; fi
    - name: bundle_and_sign
      type: CreateReleaseBundle
      configuration:
        condition: "propKey == 'drobundle.version'"
        # available soon
        inputSteps:
          - name: ProcessPayload
            status:
                - success
        releaseBundleName: droBundleApp
        releaseBundleVersion: ${bundleVersion}
        dryRun: false
        sign: true
        description: "Docker images and doc bundle"
        inputResources:
          - name: propsSelectorQuery
            trigger: true
        outputResources:
          - name: droAppSignedBundle
        releaseNotes:
          syntax: markdown
          content: |
            ## Demo Bundle Description
              * Sample bundle of app and pdf
              * Triggered by adding a given property
      execution:
        onStart:
            - env
            - echo "Generating bundle for version"
            - echo $bundleVersion
# Second pipeline : distribute it to the edge "solengedge"
  - name: dro_distribute_bundle
    configuration:
      chronological: false
    steps:
    - name: distribute
    # We use another Native step
      type: DistributeReleaseBundle
      configuration:
        dryRun: false
        inputResources:
          - name: droAppSignedBundle
            trigger: true 
          - name: droBundleDistributionRules
            trigger: false
